# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  S3BucketToolsName:
    Type: String

  BuildToolsAccountId:
    Type: String

  ProjectName:
    Type: String

  SnapshotID:
    Type: String

  GitHubRepository:
    Type: String

  GitHubBranchName:
    Type: String
    Default: ""

  S3BucketSuffix:
    Type: String
    Default: "proofs"
    Description: "S3 bucket will be AccountId-Region-S3BucketSuffix"

  CloudfrontUrl:
    Type: String
    Default: ""
    Description: "The URL for the cloudfront that serves our proof reports"

  GithubQueueUrl:
    Type: String
    Default: ""
    Description: "Url for github queue"

Resources:

  S3BucketProofs:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-${S3BucketSuffix}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BatchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "batch-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Join ["/", [!Sub "arn:aws:s3:::${S3BucketToolsName}", "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !Sub "arn:aws:s3:::${S3BucketToolsName}"

              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!Sub "${S3BucketProofs.Arn}", "*"]]
              - Action:
                  - sqs:SendMessage
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !Sub "${S3BucketProofs.Arn}"
              - Action:
                  - batch:DescribeJobQueues
                  - batch:DescribeJobDefinitions
                  - batch:SubmitJob
                  - batch:ListJobs
                Effect: Allow
                Resource: "*"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubCommitStatusPAT-??????"
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
              - Action:
                  - codebuild:StartBuild
                Effect: Allow
                Resource: "*"


  InvokeBatchLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketToolsName
        S3Key: !Sub "snapshot/snapshot-${SnapshotID}/lambda.zip"
      Handler: cbmc_ci_start.lambda_handler
      Role: !GetAtt BatchLambdaRole.Arn
      Runtime: python3.6
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          S3_BKT: !Ref S3BucketToolsName
          PKG_BKT: !Sub "${S3BucketToolsName}/snapshot/snapshot-${SnapshotID}"

  BatchStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketToolsName
        S3Key: !Sub "snapshot/snapshot-${SnapshotID}/lambda.zip"
      Handler: cbmc_ci_end.lambda_handler
      Role: !GetAtt BatchLambdaRole.Arn
      Runtime: python3.6
      Timeout: 60
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          S3_BKT: !Ref S3BucketToolsName
          S3_BUCKET_PROOFS: !Ref S3BucketProofs
          PKG_BKT: !Sub "${S3BucketToolsName}/snapshot/snapshot-${SnapshotID}"
          CBMC_CI_UPDATING_STATUS: True
          CLOUDFRONT_URL: !Ref CloudfrontUrl
          GITHUB_QUEUE_URL: !Ref GithubQueueUrl

  BatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Batch state change rule"
      EventPattern:
        source:
          - aws.batch
        detail-type:
          - "Batch Job State Change"
      State: ENABLED
      Targets:
        - Arn: !GetAtt BatchStatusLambda.Arn
          Id: "BatchStateChange"

  BatchEventPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchStatusLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BatchEventRule.Arn

  WebhookLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "webhook-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource: !GetAtt InvokeBatchLambda.Arn
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"

  HandleWebhookLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: handle_webhook.lambda_handler
      Code:
        S3Bucket: !Ref S3BucketToolsName
        S3Key: !Sub "snapshot/snapshot-${SnapshotID}/lambda.zip"
      Role: !GetAtt WebhookLambdaRole.Arn
      Runtime: python3.6
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          CBMC_CI_OPERATIONAL: True
          INVOKE_BATCH_LAMBDA: !Sub "${InvokeBatchLambda}"


  GitHubLambdaAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "LambdaAPI"
      Description: "API provided to GitHub"

  GitHubLambdaAPIRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GitHubLambdaAPI.RootResourceId
      RestApiId: !Ref GitHubLambdaAPI
      PathPart: "dummy"

  GitHubLambdaAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref GitHubLambdaAPIRootResource
      RestApiId: !Ref GitHubLambdaAPI
      PathPart: "{proxy+}"

  GitHubLambdaAPIRootRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !GetAtt GitHubLambdaAPI.RootResourceId
      RestApiId: !Ref GitHubLambdaAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/", !GetAtt HandleWebhookLambda.Arn, "/invocations" ] ]

  GitHubLambdaAPIRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref GitHubLambdaAPIResource
      RestApiId: !Ref GitHubLambdaAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/", !GetAtt HandleWebhookLambda.Arn, "/invocations" ] ]

  GitHubLambdaAPIDeployment:
    DependsOn: GitHubLambdaAPIRootRequest
    DependsOn: GitHubLambdaAPIRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GitHubLambdaAPI
      StageName: "verify"

  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HandleWebhookLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [ !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:", !Ref GitHubLambdaAPI, "/*" ] ]

  GitHubLambdaAPILoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "apigatewaylogging-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: "*"


  PrepareSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "PrepareSource-CodeBuild-Policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!Sub "arn:aws:s3:::${S3BucketToolsName}", "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !Sub "arn:aws:s3:::${S3BucketToolsName}"
              - Action:
                  - sqs:SendMessage
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!Sub "${S3BucketProofs.Arn}", "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !Sub "${S3BucketProofs.Arn}"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubCommitStatusPAT-??????"
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource: !GetAtt BatchStatusLambda.Arn
              - Action:
                  - batch:DescribeJobQueues
                  - batch:DescribeJobDefinitions
                  - batch:SubmitJob
                  - batch:ListJobs
                Effect: Allow
                Resource: "*"

  PrepareSourceProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.7.1
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET_TOOLS
            Type: PLAINTEXT
            Value: !Ref S3BucketToolsName
          - Name: S3_BUCKET_PROOFS
            Type: PLAINTEXT
            Value: !Ref S3BucketProofs
          - Name: S3_BKT
            Type: PLAINTEXT
            Value: !Ref S3BucketToolsName
          - Name: S3_PKG_PATH
            Type: PLAINTEXT
            Value: !Sub "snapshot/snapshot-${SnapshotID}"
          - Name: S3_TAR_PATH
            Type: PLAINTEXT
            Value: ""
          - Name: CBMC_REPOSITORY
            Type: PLAINTEXT
            Value: !Sub "https://github.com/${GitHubRepository}"
          - Name: CBMC_BRANCH
            Type: PLAINTEXT
            Value: !Ref GitHubBranchName
          - Name: CBMC_SHA
            Type: PLAINTEXT
            Value: ""
          - Name: CBMC_IS_DRAFT
            Type: PLAINTEXT
            Value: ""
          - Name: CBMC_ID
            Type: PLAINTEXT
            Value: ""
          - Name: PROJECT_NAME
            Type: PLAINTEXT
            Value: !Ref ProjectName
          - Name: CBMC_CI_UPDATING_STATUS
            Type: PLAINTEXT
            Value: "True"
          - Name: CLOUDFRONT_URL
            Type: PLAINTEXT
            Value: !Ref CloudfrontUrl
          - Name: GITHUB_QUEUE_URL
            Type: PLAINTEXT
            Value: !Ref GithubQueueUrl
      Name: "Prepare-Source-Project"
      ServiceRole: !Ref PrepareSourceRole
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo pip install boto3 future
                - pip install boto3 future
                - echo aws s3 cp s3://$S3_BUCKET_TOOLS/$S3_PKG_PATH/lambda.zip lambda.zip
                - aws s3 cp s3://$S3_BUCKET_TOOLS/$S3_PKG_PATH/lambda.zip lambda.zip
                - echo unzip -q lambda.zip
                - unzip -q lambda.zip
            build:
              commands:
                - python prepare_source.py

Outputs:

  GitHubLambdaAPI:
    Value: !Ref GitHubLambdaAPI
    Export:
      Name: GitHubLambdaAPI

  GitHubRepository:
    Value: !Ref GitHubRepository
    Export:
      Name: GitHubRepository

  GitHubBranchName:
    Value: !Ref GitHubBranchName
    Export:
      Name: GitHubBranchName

  SnapshotID:
    Value: !Ref SnapshotID
    Export:
      Name: SnapshotID

  S3BucketProofs:
    Value: !Ref S3BucketProofs
    Export:
      Name: S3BucketProofs
